% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/portfoliowalkr.R
\name{portfoliowalkr}
\alias{portfoliowalkr}
\title{The Portfoliowalkr function}
\usage{
portfoliowalkr(universe, match, portfolio.weight = "portfolio",
  ret.var = "return", points = 1000, method = "dikin", chains = 1,
  thin = 1, burn = 0.5)
}
\arguments{
\item{universe}{is the universe of stocks available for sampling, with dates, returns, weights, and any desired characteristics}

\item{match}{is the list of columns containing characteristics to be matched}

\item{portfolio.weight}{is the name of the column containing the weights of the target portfolio}

\item{ret.var}{is the name of the column containing percentage return over the time period}

\item{points}{is the number of points we want to sample}

\item{method}{is the MCMC sampling method. Please enter "hit-and-run" or "dikin"}

\item{chains}{is the number of chains run}

\item{thin}{every thin-th point is stored}

\item{burn}{the first burn points are deleted}
}
\value{
A list of objects for assessing portfolio performance. $plot returns a histogram of 
random portfolio performances with target portfolio and universe performances demarcated for 
comparison. $summary returns a numeric description of these performances. $frame returns the universe
frame with matched weights attached. $returns is a frame containing each portfolios' 
return, including one evenly weighted within the universe for comparison. $explore is a list
of chains from the walkr output which can be input into the explore_walkr function to better
understand the convergence of the model.
}
\description{
Given an asset universe \eqn{A} and a vector of baseline weights with 
which to calculate target portfolio characteristics \eqn{b}, 
\code{portfoliowalkr} samples points from the intersection of 
\eqn{Ax = b} with the n-simplex (\eqn{\sum x = 1}, \eqn{x_i \ge 0}).
}
\details{
\code{portfoliowalkr}, per its namesake, makes use of the \code{walkr}
package to sample randomly from the space of characteristic-matched
portfolios. \code{portfoliowalkr} returns \code{points} vectors of
weights, which when applied to the universe A yields a portfolio with
the same characteristics as the target.

Per walkr:

1) Hit-and-run is computationally less expensive and also 
guarantees uniformity asympotically with complexity of O(n^3)
points with respect to dimension n. However, in real practice, 
as dimensions ramp up, the mixing of hit-and-run is poor compared 
to Dikin. Thus, a lot of thinning would be needed as dimension
ramps up.

2) Dikin Walk is a nearly uniform method known for its very strong 
mixing properties. However, each Dikin step is much more 
computationally expensive than hit-and-run, so it takes more time 
to sample every point. Thus, the "dikin" method
uses RcppEigen to speed up the core computationally 
expensive operations in the algorithm.
}
\examples{
match_list <- portfoliowalkr(universe = jan, match = c('sector', 'growth', 'size'), points = 100, method = "dikin")       
match_list$frame
                                                                                             
}
